from aiogram.utils import executor

import logging
from aiogram import Bot, Dispatcher, types, executor

from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import os

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, callback_query

# –û–±—ä–µ–∫—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
from aiogram.types import BotCommand, BotCommandScopeChat

from aiogram.types import InputMediaPhoto

from aiogram.utils.markdown import link

from aiogram import types

from keyboards import *

import database as db

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.contrib.fsm_storage.memory import MemoryStorage

TOKEN = "xxxxx"
logging.basicConfig(level=logging.INFO)


# –ø—Ä–æ–∫—Å–∏
proxy_url = "xxxxx"


bot = Bot(token=TOKEN, proxy=proxy_url)


dp = Dispatcher(bot, storage = MemoryStorage())

# –§—É–Ω–∫—Ü–∏—è (–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞)
async def on_startup(dp):
	await db.db_start()
	await bot.send_message(xxxxx, "–Ø –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")

# –§—É–Ω–∫—Ü–∏—è (–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞)
async def on_shutdown(dp):
	await bot.send_message(xxxxx, "–Ø –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


# –ö–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –º–µ–Ω—é—à–µ–∫
menu_one = ("https://downloader.disk.yandex.ru/preview/9775edefc1cd8d1b6b97c8df41de6a2c75ded5ac83eb53c75c95517a9"
"780bbc4/667de652/PkWqoprUG_PqkzoRValuLuXRSIQkQ4YbnI3IfLP-YQSxNfPYUaxwx9Np30W0zI1kSwjgne4qJwjGYr5VY3wPtw%3D%3D?ui"
"d=0&filename=photo_2024-06-23_16-12-56.jpg&disposition=inline&hash=&limit=0&content_type=image%2Fjpeg&owner_uid=0&tknv=v2&size=2048x2048")


# –ú–µ–Ω—é—à–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_starting_commands(bot: Bot, chat_id: int):
    STARTING_COMMANDS = {
		"ru": [
			BotCommand("start", "–ö–æ–º–∞–Ω–¥–∞ start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"), # /start
			BotCommand("help", "–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –±–æ—Ç—É"), # /help
			BotCommand("id", "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π id"), # /id
			BotCommand("find_similar", "–ù–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–∏–Ω–∏–∫–æ–≤"), # /find_similar
		],
		"en": [
			BotCommand("start", "Restart bot"), # /start
			BotCommand("help", "Info about bot"), # /help
			BotCommand("id", "Find your id"), # /id
			BotCommand("find_similar", "Find like-minded people"), # /find_similar
		]
	}
    for language, commands in STARTING_COMMANDS.items():
	    await bot.set_my_commands(
		    commands=commands,
		    scope=BotCommandScopeChat(chat_id),
		    language_code=language
		)


# /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message, state: FSMContext):

    user_id = message.from_user.id

    # –ï—Å–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–µ—Å–µ–Ω –≤ –ë–î
    if await db.user_exists(user_id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")

    # –ï—Å–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–π
    else:
        await NewOrder.type.set()

        image = menu_one
        await message.answer_photo(photo=image, caption='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –±–æ—Ç–µ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –∏–∑ –ú–∞–π–Ω—à–∏–ª–¥ –∫–æ–º—å—é–Ω–∏—Ç–∏!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É.', reply_markup=mainMenu_mineShield)


# /help
@dp.message_handler(commands="help")
async def command_help(message: types.Message):
	await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º")


# /id
@dp.message_handler(commands="id")
async def command_id(message: types.Message):
	await message.answer(f"–í–∞—à id: {message.from_user.id}")



class NewOrder(StatesGroup):
    type = State()
    name = State()
    years = State()
    blogger = State()
    hobbies = State()
    city = State()



# –ò–º—è
@dp.callback_query_handler(state=NewOrder.type)
async def typing(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()

    async with state.proxy() as data:
        data['type'] = call.data
        data['user_id'] = call.from_user.id
        data['username'] = call.from_user.username

    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    await NewOrder.next()


# –í–æ–∑—Ä–∞—Å—Ç
@dp.message_handler(state=NewOrder.name)
async def add_item_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
    await NewOrder.next()


# –Æ—Ç—É–±
@dp.message_handler(state=NewOrder.years)
async def add_item_years(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['years'] = message.text
    await message.answer('–õ—é–±–∏–º—ã–π –±–ª–æ–≥–µ—Ä (–∏–∑ –º—à –∏ –º—à–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ))')
    await NewOrder.next()


# –û —Å–µ–±–µ
@dp.message_handler(state=NewOrder.blogger)
async def add_item_blogger(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['blogger'] = message.text
    await message.answer('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ')
    await NewOrder.next()


# –ì–æ—Ä–æ–¥
@dp.message_handler(state=NewOrder.hobbies)
async def add_item_hobbies(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['hobbies'] = message.text
    await message.answer('–í–∞—à –ì–æ—Ä–æ–¥(–º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å - –ø—Ä–æ–ø–∏—à–∏—Ç–µ –Ω–µ—Ç)')

    await NewOrder.next()


# –ö–æ–Ω–µ—Ü
@dp.message_handler(state=NewOrder.city)
async def add_item_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text

    await db.add_item(state)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
    await state.finish()




from aiogram.dispatcher.filters import Text

# /find_similar
@dp.message_handler(commands='find_similar')
async def find_similar(message: types.Message):
    user_id = message.from_user.id
    similar_users = await db.get_similar_users(user_id)

    if not similar_users:
        await message.answer("–î–ª—è –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏(")
        return

    for user in similar_users:

        image = menu_one

        await message.answer_photo(photo=image,
            caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ—Ç–æ—Ä—ã–º –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ–±—â–∏–π —è–∑—ã–∫\n\n"
            f"–ù–∏–∫: @{user[1]}\n"
            f"–ò–º—è: {user[2]}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user[3]}\n"
            f"–õ—é–±–∏–º—ã–π –±–ª–æ–≥–µ—Ä: {user[4]}\n"
            f"–û —Å–µ–±–µ: {user[5]}\n"
            f"–ì–æ—Ä–æ–¥: {user[6]}", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ù—Ä–∞–≤–∏—Ç—Å—èüíò", callback_data=f"like_{user[1]}"))
        )





@dp.callback_query_handler(lambda c: c.data and c.data.startswith('like_'))
async def process_callback_like(callback_query: types.CallbackQuery):
    username = callback_query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text=f"–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ @{username}\n–£–¥–∞—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
    )
    await bot.answer_callback_query(callback_query.id)






# Register dispather
def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(command_start, commands=["start"])

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)
